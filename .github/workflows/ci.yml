name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Start Redis Services
      run: |
        # Create Docker network
        docker network create redis-network
        
        # Start Redis Master
        docker run -d --name redis-master --network redis-network \
          -p 6379:6379 \
          redis:7-alpine redis-server --requirepass redis_password
        
        # Start Redis Replicas
        docker run -d --name redis-replica-1 --network redis-network \
          -p 6380:6379 \
          redis:7-alpine redis-server \
          --replicaof redis-master 6379 \
          --masterauth redis_password \
          --requirepass redis_password
        
        docker run -d --name redis-replica-2 --network redis-network \
          -p 6381:6379 \
          redis:7-alpine redis-server \
          --replicaof redis-master 6379 \
          --masterauth redis_password \
          --requirepass redis_password
        
        # Start Sentinels
        docker run -d --name sentinel-1 --network redis-network \
          -p 26379:26379 \
          redis:7-alpine sh -c 'echo "sentinel monitor mymaster redis-master 6379 2" > /etc/redis-sentinel.conf && \
          echo "sentinel auth-pass mymaster redis_password" >> /etc/redis-sentinel.conf && \
          echo "sentinel down-after-milliseconds mymaster 5000" >> /etc/redis-sentinel.conf && \
          echo "sentinel parallel-syncs mymaster 1" >> /etc/redis-sentinel.conf && \
          echo "sentinel failover-timeout mymaster 10000" >> /etc/redis-sentinel.conf && \
          redis-sentinel /etc/redis-sentinel.conf'
        
        docker run -d --name sentinel-2 --network redis-network \
          -p 26380:26379 \
          redis:7-alpine sh -c 'echo "sentinel monitor mymaster redis-master 6379 2" > /etc/redis-sentinel.conf && \
          echo "sentinel auth-pass mymaster redis_password" >> /etc/redis-sentinel.conf && \
          echo "sentinel down-after-milliseconds mymaster 5000" >> /etc/redis-sentinel.conf && \
          echo "sentinel parallel-syncs mymaster 1" >> /etc/redis-sentinel.conf && \
          echo "sentinel failover-timeout mymaster 10000" >> /etc/redis-sentinel.conf && \
          redis-sentinel /etc/redis-sentinel.conf'
        
        docker run -d --name sentinel-3 --network redis-network \
          -p 26381:26379 \
          redis:7-alpine sh -c 'echo "sentinel monitor mymaster redis-master 6379 2" > /etc/redis-sentinel.conf && \
          echo "sentinel auth-pass mymaster redis_password" >> /etc/redis-sentinel.conf && \
          echo "sentinel down-after-milliseconds mymaster 5000" >> /etc/redis-sentinel.conf && \
          echo "sentinel parallel-syncs mymaster 1" >> /etc/redis-sentinel.conf && \
          echo "sentinel failover-timeout mymaster 10000" >> /etc/redis-sentinel.conf && \
          redis-sentinel /etc/redis-sentinel.conf'
        
        # Wait for services to be ready
        sleep 10
        
        # Verify Redis is working
        docker exec redis-master redis-cli -a redis_password ping
        
        # Verify Sentinels are working (they might need more time)
        for i in {1..5}; do
          if docker exec sentinel-1 redis-cli -p 26379 ping 2>/dev/null; then
            echo "Sentinel is ready"
            break
          fi
          echo "Waiting for Sentinel to be ready... (attempt $i/5)"
          sleep 2
        done
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Restore test packages
      run: dotnet restore RedisKit.Tests/RedisKit.Tests.csproj
    
    - name: Run Unit and Integration Tests
      run: |
        dotnet test RedisKit.Tests/RedisKit.Tests.csproj \
          --configuration Release \
          --verbosity normal \
          --logger trx \
          --results-directory "TestResults" \
          --filter "Category!=Sentinel" \
          --collect:"XPlat Code Coverage" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=lcov
      env:
        REDIS_CONNECTION: localhost:6379
    
    - name: Run Sentinel Tests
      run: |
        dotnet test RedisKit.Tests/RedisKit.Tests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --results-directory "TestResults-Sentinel" \
          --filter "Category=Sentinel"
      env:
        REDIS_CONNECTION: localhost:6379
      continue-on-error: true  # Sentinel tests might be flaky in CI
    
    - name: Generate Codecov coverage
      run: |
        dotnet test RedisKit.Tests/RedisKit.Tests.csproj \
          --configuration Release \
          --no-build \
          --collect:"XPlat Code Coverage" \
          --results-directory "CodecovResults" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
      env:
        REDIS_CONNECTION: localhost:6379
    
    - name: Find coverage files
      run: |
        find TestResults -name "*.info" -type f
        find CodecovResults -name "*.xml" -type f
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./CodecovResults
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Prepare Qodana coverage
      run: |
        mkdir -p .qodana/code-coverage
        find TestResults -name "*.info" -exec cp {} .qodana/code-coverage/ \;
    
    - name: Run Qodana Code Quality
      uses: JetBrains/qodana-action@v2025.1
      with:
        pr-mode: false
      env:
        QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_634141825 }}
        QODANA_ENDPOINT: 'https://qodana.cloud'

  package:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Pack
      run: dotnet pack --no-build --configuration Release --output nupkgs
    
    - name: Upload NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: nupkgs/*.nupkg
    
    # Uncomment to publish to NuGet
    # - name: Publish to NuGet
    #   run: dotnet nuget push nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  code-quality:
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the whole workflow
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Check formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
      continue-on-error: true
    
    - name: Run code analysis
      run: dotnet build -warnaserror
      continue-on-error: true